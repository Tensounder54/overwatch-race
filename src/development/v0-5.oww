rule("Global state 0 - checkpoint position creation")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 0;
	}

	actions
	{
		Set Global Variable(A, Empty Array);
		Modify Global Variable(A, Append To Array, Vector(-9.721, 6.470, 80.279));
		Modify Global Variable(A, Append To Array, Vector(-27.010, 3.310, 43.279));
		Modify Global Variable(A, Append To Array, Vector(-31.540, 2.220, 28.490));
		Modify Global Variable(A, Append To Array, Vector(-6.460, 5.430, 6.770));
		Set Global Variable(Z, 1);
	}
}

rule("Global state 1 - checkpoint size creation")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 1;
	}

	actions
	{
		Set Global Variable(B, Empty Array);
		Modify Global Variable(B, Append To Array, 4.200);
		Modify Global Variable(B, Append To Array, 5);
		Modify Global Variable(B, Append To Array, 4.800);
		Modify Global Variable(B, Append To Array, 11);
		Set Global Variable(Z, 2);
	}
}

rule("Global state 2 - spawn config")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 2;
	}

	actions
	{
		Set Global Variable(X, Empty Array);
		Modify Global Variable(X, Append To Array, Vector(-11.601, 5.130, 144.790));
		Modify Global Variable(X, Append To Array, 4);
		Modify Global Variable(X, Append To Array, Vector(-7.860, 4.660, 108.370));
		Modify Global Variable(X, Append To Array, Vector(-0.070, 0.010, -1.000));
		Set Global Variable(Z, 3);
	}
}

rule("Global state 3 - misc config")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 3;
	}

	actions
	{
		Set Global Variable(Q, True);
		Start Forcing Spawn Room(Team 1, 0);
		Start Forcing Spawn Room(Team 2, 0);
		Set Global Variable(D, Empty Array);
		Modify Global Variable(D, Append To Array, Vector(-12.330, 11, 138));
		Modify Global Variable(D, Append To Array, 1.250);
		Modify Global Variable(D, Append To Array, Team 2);
		Modify Global Variable(D, Append To Array, 0.350);
		Modify Global Variable(D, Append To Array, 0);
		Modify Global Variable(D, Append To Array, 0);
		Modify Global Variable(D, Append To Array, False);
		Set Global Variable(Z, 10);
	}
}

rule("Global State 10 - Game set up")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 10;
	}

	actions
	{
		Skip If(And(Compare(Value In Array(Global Variable(D), 4), ==, 0), Compare(Value In Array(Global Variable(D), 5), ==, 0)), 2);
		Set Global Variable(Z, 11);
		Abort;
		Pause Match Time;
		Set Match Time(671);
		Set Global Variable(Z, 19);
	}
}

rule("Global state 11 - get in game and prep unlocking")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 11;
	}

	actions
	{
		Set Global Variable(E, Value In Array(Global Variable(D), 4));
		Set Global Variable(F, Value In Array(Global Variable(D), 5));
		Create HUD Text(All Players(All Teams), String("{0} {1}", String("Unlocking", Null, Null, Null), String("{0} and {1}", String(
			"Control Points", Null, Null, Null), String("Payload", Null, Null, Null), Null), Null), Null, Null, Top, 98, White, White,
			White, Visible To and String);
		Set Global Variable(G, Last Text ID);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Count Of(All Players(Team 2)), ==, 0)), String("{0} {1}", String(
			"Obtain", Null, Null, Null), String("{0} {1}", Team 2, String("Participants", Null, Null, Null), Null), Null), Null, Null, Top,
			99, Red, White, White, Visible To and String);
		Set Global Variable(H, Last Text ID);
		Set Match Time(0);
		Wait(1, Ignore Condition);
		Set Match Time(0);
		Wait(1, Ignore Condition);
		Pause Match Time;
		Disable Built-In Game Mode Completion;
		Skip If(Compare(Global Variable(E), !=, 0), 2);
		Set Global Variable(Z, 13);
		Abort;
		Set Global Variable(Z, 12);
	}
}

rule("Global state 12 and control points remain - unlock control points")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 12;
		Objective Index < Global Variable(E);
	}

	actions
	{
		Wait(0.250, Abort When False);
		Start Forcing Throttle(All Players(All Teams), 0, 0, 0, 0, 0, 0);
		Teleport(All Players Not On Objective(Team 2), Objective Position(Objective Index));
		Loop If Condition Is True;
	}
}

rule("Global state 12 and no control points remain - complete control point unlock")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 12;
		Objective Index == Global Variable(E);
	}

	actions
	{
		Skip If(Compare(Global Variable(F), !=, 0), 2);
		Set Global Variable(Z, 18);
		Abort;
		Set Global Variable(Z, 13);
	}
}

rule("Global state 13 and payload points remain - unlock payload points")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 13;
		Objective Index < Add(Global Variable(E), Global Variable(F));
	}

	actions
	{
		Wait(0.250, Abort When False);
		Start Forcing Throttle(All Players(All Teams), 0, 0, 0, 0, 0, 0);
		Teleport(All Players Not On Objective(Team 2), Payload Position);
		Loop If Condition Is True;
	}
}

rule("Global state 13 and no payload points remain - complete payload unlock")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 13;
		Objective Index == Add(Global Variable(E), Global Variable(F));
	}

	actions
	{
		Set Global Variable(Z, 18);
	}
}

rule("Global state 18 - finish unlocking sequence")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 18;
	}

	actions
	{
		Destroy HUD Text(Global Variable(G));
		Destroy HUD Text(Global Variable(H));
		Respawn(All Players(All Teams));
		Set Match Time(671);
		Set Global Variable(Z, 19);
	}
}

rule("Global state 19 - complete game set up")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 19;
		Is Game In Progress == True;
	}

	actions
	{
		Set Global Variable(C, Empty Array);
		Set Global Variable(W, 999);
		Create HUD Text(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, Z), ==, 20), Compare(
			Speed Of(Current Array Element), >, 2))), String("{0}!", String("Stop", Null, Null, Null), Null, Null), Null, Null, Top, 97,
			Red, White, White, Visible To and String);
		Create HUD Text(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, Z), ==, 20), Compare(
			Speed Of(Current Array Element), <=, 2))), String("{0} -> {1}", String("Use Ability 1", Null, Null, Null), String("Start",
			Null, Null, Null), Null), Null, Null, Top, 98, Blue, White, White, Visible To and String);
		Set Objective Description(All Players(All Teams), String("{0} {1}", String("Go", Null, Null, Null), String("Fast", Null, Null,
			Null), Null), Visible To and String);
		Create Effect(All Players(All Teams), Sphere, Yellow, Last Of(Global Variable(A)), Last Of(Global Variable(B)), Visible To);
		Wait(0.250, Ignore Condition);
		Set Global Variable(Z, 20);
	}
}

rule("Global state 20 - Leaderboard set up part 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 20;
	}

	actions
	{
		Set Global Variable(E, Value In Array(Global Variable(D), 0));
		Set Global Variable(F, Multiply(0.800, Value In Array(Global Variable(D), 1)));
		Set Global Variable(G, Multiply(0.640, Value In Array(Global Variable(D), 1)));
		Set Global Variable(H, Multiply(1.800, Value In Array(Global Variable(D), 1)));
		Create In-World Text(All Players(All Teams), String("Leaders", Null, Null, Null), Global Variable(E), Multiply(4, Value In Array(
			Global Variable(D), 1)), Clip Against Surfaces, Visible To and String);
		Modify Global Variable(E, Add, Multiply(Down, Global Variable(F)));
		Create In-World Text(All Players(All Teams), String("----------", Null, Null, Null), Global Variable(E), Multiply(3.010,
			Value In Array(Global Variable(D), 1)), Clip Against Surfaces, Visible To and String);
		Modify Global Variable(E, Add, Multiply(Down, Global Variable(F)));
		Set Global Variable(Z, 21);
	}
}

rule("Global state 21 - Leaderboard set up part 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 21;
	}

	actions
	{
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Value In Array(Global Variable(C), 0), W), !=,
			0)), String("{0} - {1}", Value In Array(Global Variable(C), 0), String("{0} sec", Player Variable(Value In Array(
			Global Variable(C), 0), W), Null, Null), Null), Global Variable(E), Global Variable(H), Clip Against Surfaces,
			Visible To and String);
		Modify Global Variable(E, Add, Multiply(Down, Global Variable(G)));
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Value In Array(Global Variable(C), 1), W), !=,
			0)), String("{0} - {1}", Value In Array(Global Variable(C), 1), String("{0} sec", Player Variable(Value In Array(
			Global Variable(C), 1), W), Null, Null), Null), Global Variable(E), Global Variable(H), Clip Against Surfaces,
			Visible To and String);
		Modify Global Variable(E, Add, Multiply(Down, Global Variable(G)));
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Value In Array(Global Variable(C), 2), W), !=,
			0)), String("{0} - {1}", Value In Array(Global Variable(C), 2), String("{0} sec", Player Variable(Value In Array(
			Global Variable(C), 2), W), Null, Null), Null), Global Variable(E), Global Variable(H), Clip Against Surfaces,
			Visible To and String);
		Modify Global Variable(E, Add, Multiply(Down, Global Variable(G)));
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Value In Array(Global Variable(C), 3), W), !=,
			0)), String("{0} - {1}", Value In Array(Global Variable(C), 3), String("{0} sec", Player Variable(Value In Array(
			Global Variable(C), 3), W), Null, Null), Null), Global Variable(E), Global Variable(H), Clip Against Surfaces,
			Visible To and String);
		Modify Global Variable(E, Add, Multiply(Down, Global Variable(G)));
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Value In Array(Global Variable(C), 4), W), !=,
			0)), String("{0} - {1}", Value In Array(Global Variable(C), 4), String("{0} sec", Player Variable(Value In Array(
			Global Variable(C), 4), W), Null, Null), Null), Global Variable(E), Global Variable(H), Clip Against Surfaces,
			Visible To and String);
		Set Global Variable(Z, 90);
	}
}

rule("Global state 90 - complete global init")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 90;
	}

	actions
	{
		Set Global Variable(I, Empty Array);
		Set Global Variable(J, Empty Array);
		Set Global Variable(K, Empty Array);
		Set Global Variable(Y, True);
		Set Global Variable(Z, 99);
	}
}

rule("Player state 0 and global initialization complete - Player initialization")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global Variable(Y) == True;
		Player Variable(Event Player, Z) == 0;
	}

	actions
	{
		Set Player Variable(Event Player, W, 999);
		Disable Built-In Game Mode Respawning(Event Player);
		Set Respawn Max Time(Event Player, 99);
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
		Set Player Variable(Event Player, R, Empty Array);
		Set Player Variable(Event Player, S, Empty Array);
		Set Player Variable(Event Player, T, 0);
		Chase Player Variable At Rate(Event Player, T, 10000, 1, None);
		Set Player Variable(Event Player, Q, Empty Array);
		Modify Player Variable(Event Player, Q, Append To Array, 0);
		Modify Player Variable(Event Player, Q, Append To Array, 0);
		Set Player Variable(Event Player, E, Empty Array);
		Set Player Variable(Event Player, G, Empty Array);
		Set Player Variable(Event Player, H, 0);
		Set Player Variable(Event Player, I, 0);
		Set Player Variable(Event Player, F, Null);
		Set Player Variable(Event Player, Z, 1);
	}
}

rule("Player state 1 - Player hud creation part 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 1;
	}

	actions
	{
		Create HUD Text(Event Player, String("{0} sec", Player Variable(Event Player, X), Null, Null), Null, Null, Top, 10, White, White,
			White, Visible To and String);
		Create HUD Text(Event Player, String("{0} {1}", Event Player, String("Records", Null, Null, Null), Null), Null, Null, Left,
			-10.000, White, White, White, String);
		Create HUD Text(Event Player, Null, Null, String("{0}: {1}", String("Attempts", Null, Null, Null), Value In Array(Player Variable(
			Event Player, Q), 0), Null), Left, -9.000, White, White, White, Visible To and String);
		Create HUD Text(Event Player, Null, Null, String("{0}: {1}", String("Finished", Null, Null, Null), Value In Array(Player Variable(
			Event Player, Q), 1), Null), Left, -8.000, White, White, White, Visible To and String);
		Create HUD Text(Event Player, Null, Null, String("{0}: {1}", String("{0} {1}", String("Game", Null, Null, Null), String("Time",
			Null, Null, Null), Null), String("{0}:{1}", Round To Integer(Divide(Player Variable(Event Player, T), 60), Down), Modulo(
			Round To Integer(Player Variable(Event Player, T), Down), 60), Null), Null), Left, -7.000, White, White, White,
			Visible To and String);
		Create HUD Text(Event Player, Null, Null, String("----------", Null, Null, Null), Left, 3, White, White, White,
			Visible To and String);
		Create HUD Text(Event Player, Null, Null, String("{0} {1}", String("Fastest", Null, Null, Null), String("Times", Null, Null, Null),
			Null), Left, 4, White, White, White, Visible To and String);
		Set Player Variable(Event Player, Z, 2);
		Create HUD Text(Event Player, Null, Null, String("{0} = {1}", String("Use Ultimate Ability", Null, Null, Null), String("Try Again",
			Null, Null, Null), Null), Top, 9, White, White, White, Visible To and String);
	}
}

rule("Player state 2 - Player hud creation part 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 2;
	}

	actions
	{
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, R), 0), !=, 0)), Null,
			Null, String("{0}: {1}", 1, String("{0} sec", Value In Array(Player Variable(Event Player, R), 0), Null, Null), Null), Left, 5,
			White, White, Yellow, Visible To and String);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, R), 1), !=, 0)), Null,
			Null, String("{0}: {1}", 2, String("{0} sec", Value In Array(Player Variable(Event Player, R), 1), Null, Null), Null), Left, 6,
			White, White, White, Visible To and String);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, R), 2), !=, 0)), Null,
			Null, String("{0}: {1}", 3, String("{0} sec", Value In Array(Player Variable(Event Player, R), 2), Null, Null), Null), Left, 7,
			White, White, White, Visible To and String);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, R), 3), !=, 0)), Null,
			Null, String("{0}: {1}", 4, String("{0} sec", Value In Array(Player Variable(Event Player, R), 3), Null, Null), Null), Left, 8,
			White, White, White, Visible To and String);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, R), 4), !=, 0)), Null,
			Null, String("{0}: {1}", 5, String("{0} sec", Value In Array(Player Variable(Event Player, R), 4), Null, Null), Null), Left, 9,
			White, White, White, Visible To and String);
		Set Player Variable(Event Player, Z, 3);
	}
}

rule("Player state 3 - Player hud creation part 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 3;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, String("----------", Null, Null, Null), Left, 10, White, White, White,
			Visible To and String);
		Create HUD Text(Event Player, Null, Null, String("Times", Null, Null, Null), Left, 11, White, White, White, Visible To and String);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, S), 0), !=, 0)), Null,
			Null, String("{0} sec", Value In Array(Player Variable(Event Player, S), 0), Null, Null), Left, 12, White, White, White,
			Visible To and String);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, S), 1), !=, 0)), Null,
			Null, String("{0} sec", Value In Array(Player Variable(Event Player, S), 1), Null, Null), Left, 13, White, White, White,
			Visible To and String);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, S), 2), !=, 0)), Null,
			Null, String("{0} sec", Value In Array(Player Variable(Event Player, S), 2), Null, Null), Left, 14, White, White, White,
			Visible To and String);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, S), 3), !=, 0)), Null,
			Null, String("{0} sec", Value In Array(Player Variable(Event Player, S), 3), Null, Null), Left, 15, White, White, White,
			Visible To and String);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, S), 4), !=, 0)), Null,
			Null, String("{0} sec", Value In Array(Player Variable(Event Player, S), 4), Null, Null), Left, 16, White, White, White,
			Visible To and String);
		Set Player Variable(Event Player, Z, 10);
	}
}

rule("Player state 10 - course creation start")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 10;
	}

	actions
	{
		Set Player Variable(Event Player, M, Empty Array);
		Set Player Variable(Event Player, A, Subtract(Count Of(Global Variable(A)), 2));
		Set Player Variable(Event Player, N, Array Slice(Global Variable(A), 1, Player Variable(Event Player, A)));
		Set Player Variable(Event Player, O, Array Slice(Global Variable(B), 1, Player Variable(Event Player, A)));
		Set Player Variable(Event Player, Z, 11);
	}
}

rule("Player state 11 and count of (N) > 0 - Course creation loop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 11;
		Count Of(Player Variable(Event Player, N)) > 0;
	}

	actions
	{
		Set Player Variable(Event Player, A, Empty Array);
		Modify Player Variable(Event Player, A, Append To Array, First Of(Player Variable(Event Player, N)));
		Modify Player Variable(Event Player, A, Append To Array, First Of(Player Variable(Event Player, O)));
		Modify Player Variable(Event Player, A, Append To Array, 0);
		Modify Player Variable(Event Player, A, Append To Array, 0);
		Modify Player Variable(Event Player, E, Append To Array, Player Variable(Event Player, A));
		Modify Global Variable(J, Append To Array, Event Player);
		Set Player Variable(Event Player, N, Array Slice(Player Variable(Event Player, N), 1, 9999999.000));
		Set Player Variable(Event Player, O, Array Slice(Player Variable(Event Player, O), 1, 9999999.000));
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Set Player Variable(Event Player, Z, 15);
	}
}

rule("player state 15 - Course creation loop finish")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 15;
	}

	actions
	{
		Set Player Variable(Event Player, N, Global Variable(A));
		Set Player Variable(Event Player, O, Global Variable(B));
		Set Player Variable(Event Player, A, Empty Array);
		Modify Player Variable(Event Player, A, Append To Array, First Of(Player Variable(Event Player, N)));
		Modify Player Variable(Event Player, A, Append To Array, First Of(Player Variable(Event Player, O)));
		Modify Player Variable(Event Player, A, Append To Array, 1);
		Modify Player Variable(Event Player, A, Append To Array, 1);
		Modify Player Variable(Event Player, E, Append To Array, Player Variable(Event Player, A));
		Modify Global Variable(J, Append To Array, Event Player);
		Set Player Variable(Event Player, A, Empty Array);
		Modify Player Variable(Event Player, A, Append To Array, First Of(Player Variable(Event Player, N)));
		Modify Player Variable(Event Player, A, Append To Array, False);
		Modify Player Variable(Event Player, A, Append To Array, 1);
		Modify Player Variable(Event Player, G, Append To Array, Player Variable(Event Player, A));
		Modify Global Variable(K, Append To Array, Event Player);
		Modify Player Variable(Event Player, H, Add, 2);
		Set Player Variable(Event Player, Z, 12);
	}
}

rule("Player state 12 - respawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 12;
		Player Variable(Event Player, H) == Player Variable(Event Player, I);
	}

	actions
	{
		Respawn(Event Player);
		Stop Forcing Throttle(Event Player);
		Set Ability 1 Enabled(Event Player, False);
		Set Player Variable(Event Player, Z, 14);
	}
}

rule("Player state 14 - respawn complete")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 14;
		Is Alive(Event Player) == True;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Skip If(Compare(Team Of(Event Player), !=, Value In Array(Global Variable(D), 2)), 2);
		Set Player Variable(Event Player, Z, 13);
		Abort;
		Set Player Variable(Event Player, Z, 20);
	}
}

rule("Player state 13 - Teleport to spawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 13;
	}

	actions
	{
		Set Player Variable(Event Player, A, Value In Array(Global Variable(X), 1));
		Set Player Variable(Event Player, B, Random Real(Multiply(Player Variable(Event Player, A), -1.000), Player Variable(Event Player,
			A)));
		Set Player Variable(Event Player, C, Random Real(Multiply(Player Variable(Event Player, A), -1.000), Player Variable(Event Player,
			A)));
		Set Player Variable(Event Player, D, Add(Value In Array(Global Variable(X), 0), Vector(Player Variable(Event Player, B), 0,
			Player Variable(Event Player, C))));
		Teleport(Event Player, Player Variable(Event Player, D));
		Set Player Variable(Event Player, Z, 20);
	}
}

rule("Player state 20 and ability 1 pressed - Initialize race")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 20;
		Is Button Held(Event Player, Ability 1) == True;
		Speed Of(Event Player) <= 2;
	}

	actions
	{
		Set Player Variable(Event Player, Z, 22);
	}
}

rule("Player state 20 and left spawn - force to spawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 20;
		Is In Spawn Room(Event Player) == False;
		Compare(Team Of(Event Player), ==, Value In Array(Global Variable(K), 2)) == False;
		Global Variable(Q) == False;
	}

	actions
	{
		Set Player Variable(Event Player, Z, 13);
	}
}

rule("Player state 22 - spawn into race")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 22;
	}

	actions
	{
		Set Player Variable(Event Player, X, 0);
		Chase Player Variable At Rate(Event Player, X, 9999, 1, None);
		Teleport(Event Player, Value In Array(Global Variable(X), 2));
		Set Facing(Event Player, Value In Array(Global Variable(X), 3), To World);
		Set Player Variable(Event Player, Z, 30);
		Set Ability 1 Enabled(Event Player, Value In Array(Global Variable(D), 6));
	}
}

rule("Player State 30 and Reach checkpoint")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 30;
		Count Of(Player Variable(Event Player, N)) > 1;
		Distance Between(Position Of(Event Player), Player Variable(Event Player, N)) < Add(First Of(Player Variable(Event Player, O)),
			Value In Array(Player Variable(Event Player, D), 3));
	}

	actions
	{
		Set Player Variable(Event Player, Z, 40);
	}
}

rule("Player State 30 and reach goal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 30;
		Count Of(Player Variable(Event Player, N)) == 1;
		Distance Between(Position Of(Event Player), Player Variable(Event Player, N)) < Add(First Of(Player Variable(Event Player, O)),
			Value In Array(Player Variable(Event Player, D), 3));
	}

	actions
	{
		Set Player Variable(Event Player, Z, 50);
	}
}

rule("Player State 40 - Advance checkpoint")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 40;
	}

	actions
	{
		Set Player Variable(Event Player, N, Array Slice(Player Variable(Event Player, N), 1, 9999999.000));
		Set Player Variable(Event Player, O, Array Slice(Player Variable(Event Player, O), 1, 9999999.000));
		Set Player Variable(Event Player, A, Value In Array(Player Variable(Event Player, M), Subtract(Count Of(Player Variable(
			Event Player, M)), 1)));
		Destroy Effect(Player Variable(Event Player, A));
		Set Player Variable(Event Player, M, Array Slice(Player Variable(Event Player, M), 0, Subtract(Count Of(Player Variable(
			Event Player, M)), 1)));
		Skip If(Compare(Count Of(Player Variable(Event Player, N)), !=, 1), 2);
		Set Player Variable(Event Player, Z, 42);
		Abort;
		Set Player Variable(Event Player, Z, 41);
	}
}

rule("Player State 41 - Create checkpoint effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 41;
	}

	actions
	{
		Set Player Variable(Event Player, A, First Of(Player Variable(Event Player, M)));
		Destroy Effect(Player Variable(Event Player, A));
		Set Player Variable(Event Player, M, Array Slice(Player Variable(Event Player, M), 1, 9999999.000));
		Set Player Variable(Event Player, Z, -1.000);
		Set Player Variable(Event Player, A, Empty Array);
		Modify Player Variable(Event Player, A, Append To Array, First Of(Player Variable(Event Player, N)));
		Modify Player Variable(Event Player, A, Append To Array, First Of(Player Variable(Event Player, O)));
		Modify Player Variable(Event Player, A, Append To Array, 1);
		Modify Player Variable(Event Player, A, Append To Array, 1);
		Modify Player Variable(Event Player, H, Add, 1);
		Modify Player Variable(Event Player, E, Append To Array, Player Variable(Event Player, A));
		Modify Global Variable(I, Append To Array, Event Player);
		Set Player Variable(Event Player, Z, 42);
	}
}

rule("Player State 42 - Create checkpoint world icon")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 42;
	}

	actions
	{
		Set Player Variable(Event Player, A, Empty Array);
		Modify Player Variable(Event Player, A, Append To Array, Value In Array(Player Variable(Event Player, N), 0));
		Modify Player Variable(Event Player, A, Append To Array, Compare(Count Of(Player Variable(Event Player, N)), ==, 1));
		Modify Player Variable(Event Player, A, Append To Array, 1);
		Modify Player Variable(Event Player, H, Add, 1);
		Modify Player Variable(Event Player, G, Append To Array, Player Variable(Event Player, A));
		Modify Global Variable(K, Append To Array, Event Player);
		Set Player Variable(Event Player, Z, 43);
	}
}

rule("Player State 43 - Wait for work completion")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 43;
		Player Variable(Event Player, H) == Player Variable(Event Player, I);
	}

	actions
	{
		Set Player Variable(Event Player, Z, 30);
	}
}

rule("Player state 50 - Start finish race")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 50;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, X);
		Skip If(Compare(Player Variable(Event Player, X), >=, Player Variable(Event Player, W)), 2);
		Set Player Variable(Event Player, Z, 51);
		Abort;
		Small Message(Event Player, String("{0}: {1}", String("Time", Null, Null, Null), String("{0} sec", Player Variable(Event Player,
			X), Null, Null), Null));
		Set Player Variable(Event Player, Z, 60);
	}
}

rule("Player state 51- Update personal best")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 51;
	}

	actions
	{
		Set Player Variable(Event Player, W, Player Variable(Event Player, X));
		Skip If(Compare(Player Variable(Event Player, W), >=, Global Variable(W)), 3);
		Set Global Variable(W, Player Variable(Event Player, W));
		Set Player Variable(Event Player, Z, 52);
		Abort;
		Small Message(All Players(All Teams), String("{0} - {1}", String("{0} {1}", Event Player, String("New Record", Null, Null, Null),
			Null), String("{0} sec", Player Variable(Event Player, W), Null, Null), Null));
		Set Player Variable(Event Player, Z, 60);
	}
}

rule("Player state 52 - Update server best")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 52;
	}

	actions
	{
		Big Message(All Players(All Teams), String("{0}: {1}", String("New High Score", Null, Null, Null), String("{0} - {1}",
			Event Player, String("{0} sec", Player Variable(Event Player, W), Null, Null), Null), Null));
		Set Player Variable(Event Player, Z, 60);
	}
}

rule("Player state 60 - Update recent and best times lists")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 60;
	}

	actions
	{
		Set Player Variable(Event Player, A, Array Slice(Player Variable(Event Player, S), 1, 4));
		Set Player Variable(Event Player, S, Append To Array(Player Variable(Event Player, X), Player Variable(Event Player, S)));
		Set Player Variable(Event Player, A, Append To Array(Player Variable(Event Player, R), Player Variable(Event Player, X)));
		Set Player Variable(Event Player, B, Sorted Array(Player Variable(Event Player, A), Current Array Element));
		Set Player Variable(Event Player, R, Array Slice(Player Variable(Event Player, B), 0, 5));
		Set Player Variable(Event Player, Z, 70);
	}
}

rule("Player state 70 - Finish race")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 70;
	}

	actions
	{
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
		Set Player Variable(Event Player, A, Array Slice(Player Variable(Event Player, Q), 0, 1));
		Modify Player Variable(Event Player, A, Append To Array, Add(Value In Array(Player Variable(Event Player, Q), 1), 1));
		Modify Player Variable(Event Player, A, Append To Array, Array Slice(Player Variable(Event Player, Q), 2, 9999999.000));
		Set Player Variable(Event Player, Q, Player Variable(Event Player, A));
		Set Player Variable(Event Player, Z, 90);
	}
}

rule("Player state 90 - Start reset sequence")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 90;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, X);
		Destroy Icon(Player Variable(Event Player, F));
		Set Player Variable(Event Player, A, Empty Array);
		Modify Player Variable(Event Player, A, Append To Array, Add(Value In Array(Player Variable(Event Player, Q), 0), 1));
		Modify Player Variable(Event Player, A, Append To Array, Array Slice(Player Variable(Event Player, Q), 1, 9999999.000));
		Set Player Variable(Event Player, Q, Player Variable(Event Player, A));
		Set Player Variable(Event Player, Z, 91);
	}
}

rule("Player state 91 and count of(M) > 0 - Effect clean loop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 91;
		Count Of(Player Variable(Event Player, M)) > 0;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Set Player Variable(Event Player, A, First Of(Player Variable(Event Player, M)));
		Destroy Effect(Player Variable(Event Player, A));
		Set Player Variable(Event Player, M, Array Slice(Player Variable(Event Player, M), 1, 9999999.000));
		Loop If Condition Is True;
	}
}

rule("Player state 91 and count of(M) == 0 - Finish effect clean loop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 91;
		Count Of(Player Variable(Event Player, M)) == 0;
	}

	actions
	{
		Set Player Variable(Event Player, Z, 92);
	}
}

rule("Player state 92 - Final clean up (currently unused)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 92;
	}

	actions
	{
		Set Player Variable(Event Player, Z, 10);
	}
}

rule("Rebuild Leaderboard")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Y) == True;
		Global Variable(Q) == False;
	}

	actions
	{
		Wait(5, Ignore Condition);
		Set Global Variable(H, Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, W), <, 999)));
		Set Global Variable(H, Filtered Array(Global Variable(H), Compare(Player Variable(Current Array Element, W), !=, 0)));
		Set Global Variable(C, Sorted Array(Global Variable(H), Player Variable(Current Array Element, W)));
		Loop;
	}
}

rule("ultimate pressed - quick reset")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Ultimate) == True;
		Player Variable(Event Player, Z) >= 30;
		Player Variable(Event Player, Z) <= 49;
	}

	actions
	{
		Kill(Event Player, Null);
	}
}

rule("Make players phase")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Status(Event Player, Phased Out) == False;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 600);
	}
}

rule("Player killed event - Reset PLAYER")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Global Variable(Y) == True;
	}

	actions
	{
		Set Player Variable(Event Player, Z, 90);
	}
}

rule("wq state 0 - check if sphere work available")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(L) == 0;
		Global Variable(Y) == True;
		Add(Count Of(Global Variable(I)), Add(Count Of(Global Variable(J)), Count Of(Global Variable(K)))) > 0;
	}

	actions
	{
		Set Global Variable(E, Or(Compare(Count Of(Global Variable(I)), >, 0), Compare(Count Of(Global Variable(J)), >, 0)));
		Skip If(Global Variable(E), 2);
		Set Global Variable(L, 100);
		Abort;
		Set Global Variable(L, 5);
	}
}

rule("Sphere wq state 5 - Start sphere work")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(L) == 5;
	}

	actions
	{
		Skip If(Compare(Count Of(Global Variable(I)), >, 0), 4);
		Set Global Variable(E, First Of(Global Variable(J)));
		Set Global Variable(J, Array Slice(Global Variable(J), 1, 9999999.000));
		Set Global Variable(L, 10);
		Abort;
		Set Global Variable(E, First Of(Global Variable(I)));
		Set Global Variable(I, Array Slice(Global Variable(I), 1, 9999999.000));
		Set Global Variable(L, 10);
	}
}

rule("Sphere wq state 10 - Create effect")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(L) == 10;
	}

	actions
	{
		Set Global Variable(F, Value In Array(Player Variable(Global Variable(E), E), 0));
		Set Global Variable(G, Value In Array(Player Variable(Global Variable(E), E), 1));
		Skip If(Compare(Value In Array(Player Variable(Global Variable(E), E), 2), !=, 0), 4);
		Create Effect(Global Variable(E), Sphere, White, Global Variable(F), Global Variable(G), None);
		Set Global Variable(F, Last Created Entity);
		Set Global Variable(L, 20);
		Abort;
		Create Effect(Global Variable(E), Sphere, Purple, Global Variable(F), Global Variable(G), None);
		Set Global Variable(F, Last Created Entity);
		Set Global Variable(L, 20);
	}
}

rule("Sphere wq state 20 - Return results to player")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(L) == 20;
	}

	actions
	{
		Modify Player Variable(Global Variable(E), M, Append To Array, Global Variable(F));
		Set Global Variable(F, Value In Array(Player Variable(Global Variable(E), E), 3));
		Set Player Variable(Global Variable(E), E, Array Slice(Player Variable(Global Variable(E), E), 4, 9999999.000));
		Modify Player Variable(Global Variable(E), I, Add, Global Variable(F));
		Set Global Variable(L, 100);
	}
}

rule("wq state 100 - check if icon work available")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(L) == 100;
	}

	actions
	{
		Set Global Variable(E, Compare(Count Of(Global Variable(K)), >, 0));
		Skip If(Global Variable(E), 2);
		Set Global Variable(L, 999);
		Abort;
		Set Global Variable(L, 105);
	}
}

rule("icon wq state 105 - Start icon work")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(L) == 105;
	}

	actions
	{
		Set Global Variable(E, First Of(Global Variable(K)));
		Set Global Variable(K, Array Slice(Global Variable(K), 1, 9999999.000));
		Destroy Icon(Player Variable(Global Variable(E), F));
		Set Global Variable(L, 110);
	}
}

rule("ICON wq state 110 - Create icon")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(L) == 110;
	}

	actions
	{
		Set Global Variable(F, Value In Array(Player Variable(Global Variable(E), G), 0));
		Skip If(Compare(Value In Array(Player Variable(Global Variable(E), G), 1), ==, True), 4);
		Create Icon(Global Variable(E), Global Variable(F), Diamond, None, White, True);
		Set Global Variable(F, Last Created Entity);
		Set Global Variable(L, 120);
		Abort;
		Create Icon(Global Variable(E), Global Variable(F), Exclamation Mark, None, White, True);
		Set Global Variable(F, Last Created Entity);
		Set Global Variable(L, 120);
	}
}

rule("Icon wq state 120 - Return results to player")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(L) == 120;
	}

	actions
	{
		Set Player Variable(Global Variable(E), F, Global Variable(F));
		Set Global Variable(F, Value In Array(Player Variable(Global Variable(E), G), 2));
		Set Player Variable(Global Variable(E), G, Array Slice(Player Variable(Global Variable(E), G), 3, 9999999.000));
		Modify Player Variable(Global Variable(E), I, Add, Global Variable(F));
		Set Global Variable(L, 999);
	}
}

rule("wq state 999 - Restart queue")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(L) == 999;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Set Global Variable(L, 0);
		Loop If Condition Is True;
	}
}