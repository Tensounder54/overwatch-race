rule("Global state 0 - checkpoint position creation")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 0;
	}

	actions
	{
		Set Global Variable(A, Empty Array);
		Modify Global Variable(A, Append To Array, Vector(9.050, 22.960, -132.170));
		Modify Global Variable(A, Append To Array, Vector(15.380, 23.360, -120.320));
		Modify Global Variable(A, Append To Array, Vector(27.820, 22.750, -109.260));
		Modify Global Variable(A, Append To Array, Vector(38.540, 22.860, -98.490));
		Modify Global Variable(A, Append To Array, Vector(51.910, 23.260, -83.320));
		Modify Global Variable(A, Append To Array, Vector(63.800, 20.170, -98.930));
		Modify Global Variable(A, Append To Array, Vector(80.060, 22.280, -120.660));
		Modify Global Variable(A, Append To Array, Vector(80.120, 24.370, -137.620));
		Modify Global Variable(A, Append To Array, Vector(61.030, 27.300, -135.330));
		Modify Global Variable(A, Append To Array, Vector(37.830, 28.270, -136.920));
		Modify Global Variable(A, Append To Array, Vector(14.810, 27.550, -141.380));
		Modify Global Variable(A, Append To Array, Vector(-15.240, 28.810, -142.590));
		Modify Global Variable(A, Append To Array, Vector(-14.410, 28.970, -112.350));
		Modify Global Variable(A, Append To Array, Vector(8.550, 17.240, -109.060));
		Set Global Variable(Z, 1);
	}
}

rule("Global state 1 - checkpoint size creation")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 1;
	}

	actions
	{
		Set Global Variable(B, Empty Array);
		Modify Global Variable(B, Append To Array, Vector(0.150, 0.010, 0.990));
		Modify Global Variable(B, Append To Array, 5);
		Modify Global Variable(B, Append To Array, 5.600);
		Modify Global Variable(B, Append To Array, 4.500);
		Modify Global Variable(B, Append To Array, 6);
		Modify Global Variable(B, Append To Array, 4);
		Modify Global Variable(B, Append To Array, 3.600);
		Modify Global Variable(B, Append To Array, 6);
		Modify Global Variable(B, Append To Array, 5.700);
		Modify Global Variable(B, Append To Array, 7);
		Modify Global Variable(B, Append To Array, 7);
		Modify Global Variable(B, Append To Array, 7);
		Modify Global Variable(B, Append To Array, 7);
		Modify Global Variable(B, Append To Array, 4);
		Set Global Variable(Z, 2);
	}
}

rule("Global state 2 - spawn room config")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 2;
	}

	actions
	{
		Set Global Variable(C, Empty Array);
		Modify Global Variable(C, Append To Array, Vector(135.570, 17.920, -124.920));
		Modify Global Variable(C, Append To Array, 4.800);
		Modify Global Variable(C, Append To Array, 3.100);
		Modify Global Variable(C, Append To Array, -89.800);
		Modify Global Variable(C, Append To Array, Vector(128.380, 20.380, -124.920));
		Modify Global Variable(C, Append To Array, 0.800);
		Modify Global Variable(C, Append To Array, Vector(141.020, 17.430, -129.190));
		Modify Global Variable(C, Append To Array, Vector(141.370, 17.430, -120.700));
		Set Global Variable(Z, 3);
	}
}

rule("Global state 3 - misc config")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 3;
	}

	actions
	{
		Start Forcing Spawn Room(Team 1, 0);
		Start Forcing Spawn Room(Team 2, 0);
		Set Global Variable(Q, False);
		Set Global Variable(D, Empty Array);
		Modify Global Variable(D, Append To Array, 0.250);
		Modify Global Variable(D, Append To Array, Team 2);
		Modify Global Variable(D, Append To Array, 1);
		Modify Global Variable(D, Append To Array, 0);
		Set Global Variable(S, Empty Array);
		Modify Global Variable(S, Append To Array, 3);
		Modify Global Variable(S, Append To Array, 6);
		Modify Global Variable(S, Append To Array, 9);
		Modify Global Variable(S, Append To Array, 11);
		Set Global Variable(Z, 10);
	}
}

rule("Global State 10 - Unlock map")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 10;
	}

	actions
	{
		Disable Built-In Game Mode Announcer;
		Disable Built-In Game Mode Completion;
		Skip If(Or(Compare(Value In Array(Global Variable(D), 2), !=, 1), Compare(Value In Array(Global Variable(D), 3), >, 0)), 2);
		Set Global Variable(Z, 16);
		Abort;
		Skip If(And(Compare(Value In Array(Global Variable(D), 2), ==, 0), Compare(Value In Array(Global Variable(D), 3), ==, 0)), 2);
		Set Global Variable(Z, 11);
		Abort;
		Set Global Variable(Z, 19);
	}
}

rule("Global state 11 - get in game and prep unlocking")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 11;
	}

	actions
	{
		Set Global Variable(E, Value In Array(Global Variable(D), 2));
		Set Global Variable(F, Value In Array(Global Variable(D), 3));
		Set Match Time(0);
		Wait(1, Ignore Condition);
		Set Match Time(0);
		Wait(1, Ignore Condition);
		Set Global Variable(Z, 15);
	}
}

rule("Global state 15 - Freeze players")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global Variable(Z) == 15;
		Has Status(Event Player, Frozen) == False;
	}

	actions
	{
		Set Status(Event Player, Null, Frozen, 9999);
	}
}

rule("Global state 15 and control points remain - unlock control points")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global Variable(Z) == 15;
		Objective Index < Global Variable(E);
		Is On Objective(Event Player) == False;
	}

	actions
	{
		Teleport(Event Player, Objective Position(Objective Index));
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Global state 15 and payload checkpoints remain - advance payload")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global Variable(Z) == 15;
		Objective Index >= Global Variable(E);
		Objective Index < Add(Global Variable(E), Global Variable(F));
		Is On Objective(Event Player) == False;
	}

	actions
	{
		Teleport(Event Player, Payload Position);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Global state 15 and no payload points remain - complete map unlock")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 15;
		Objective Index == Add(Global Variable(E), Global Variable(F));
	}

	actions
	{
		Clear Status(All Players(All Teams), Frozen);
		Respawn(All Players(All Teams));
		Set Global Variable(Z, 19);
	}
}

rule("Global state 16 - unlock control map")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 16;
	}

	actions
	{
		Set Match Time(0);
		Wait(1, Ignore Condition);
		Set Match Time(0);
		Wait(1, Ignore Condition);
		Set Global Variable(Z, 19);
	}
}

rule("Global state 19 - complete game set up")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 19;
	}

	actions
	{
		Set Global Variable(L, Empty Array);
		Set Global Variable(W, 999);
		Set Global Variable(R, Global Variable(Q));
		Pause Match Time;
		Set Match Time(671);
		Skip If(And(Compare(Value In Array(Global Variable(D), 2), !=, 1), Compare(Value In Array(Global Variable(D), 3), !=, 0)), 1);
		Set Match Time(1111);
		Set Objective Description(All Players(All Teams), String("{0}!", String("{0} {1}", String("Go", Null, Null, Null), String("Fast",
			Null, Null, Null), Null), Null, Null), Visible To and String);
		Set Global Variable(Z, 20);
	}
}

rule("Global state 20 - Leaderboard set up part 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 20;
	}

	actions
	{
		Set Global Variable(E, Value In Array(Global Variable(C), 4));
		Set Global Variable(I, Value In Array(Global Variable(C), 5));
		Set Global Variable(F, Multiply(0.800, Global Variable(I)));
		Set Global Variable(G, Multiply(0.640, Global Variable(I)));
		Set Global Variable(H, Multiply(1.800, Global Variable(I)));
		Create In-World Text(All Players(All Teams), String("High Scores", Null, Null, Null), Global Variable(E), Multiply(4,
			Global Variable(I)), Clip Against Surfaces, Visible To and String);
		Modify Global Variable(E, Add, Multiply(Down, Global Variable(F)));
		Create In-World Text(All Players(All Teams), String("----------", Null, Null, Null), Global Variable(E), Multiply(3.010,
			Global Variable(I)), Clip Against Surfaces, Visible To and String);
		Modify Global Variable(E, Add, Multiply(Down, Global Variable(F)));
		Set Global Variable(Z, 21);
	}
}

rule("Global state 21 - Leaderboard set up part 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 21;
	}

	actions
	{
		Create In-World Text(Filtered Array(All Players(All Teams), And(Not(Global Variable(M)), Compare(Player Variable(Value In Array(
			Global Variable(L), 0), W), !=, 0))), String("{0} - {1}", Value In Array(Global Variable(L), 0), String("{0} sec",
			Player Variable(Value In Array(Global Variable(L), 0), W), Null, Null), Null), Global Variable(E), Global Variable(H),
			Clip Against Surfaces, Visible To and String);
		Create In-World Text(Filtered Array(All Players(All Teams), And(Global Variable(M), True)), String("{0} - {1}", String("{0} {1}",
			String("Disconnect", Null, Null, Null), String("Participant", Null, Null, Null), Null), String("{0} sec", Global Variable(W),
			Null, Null), Null), Global Variable(E), Global Variable(H), Clip Against Surfaces, Visible To and String);
		Modify Global Variable(E, Add, Multiply(Down, Global Variable(G)));
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Value In Array(Global Variable(L), 1), W), !=,
			0)), String("{0} - {1}", Value In Array(Global Variable(L), 1), String("{0} sec", Player Variable(Value In Array(
			Global Variable(L), 1), W), Null, Null), Null), Global Variable(E), Global Variable(H), Clip Against Surfaces,
			Visible To and String);
		Modify Global Variable(E, Add, Multiply(Down, Global Variable(G)));
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Value In Array(Global Variable(L), 2), W), !=,
			0)), String("{0} - {1}", Value In Array(Global Variable(L), 2), String("{0} sec", Player Variable(Value In Array(
			Global Variable(L), 2), W), Null, Null), Null), Global Variable(E), Global Variable(H), Clip Against Surfaces,
			Visible To and String);
		Modify Global Variable(E, Add, Multiply(Down, Global Variable(G)));
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Value In Array(Global Variable(L), 3), W), !=,
			0)), String("{0} - {1}", Value In Array(Global Variable(L), 3), String("{0} sec", Player Variable(Value In Array(
			Global Variable(L), 3), W), Null, Null), Null), Global Variable(E), Global Variable(H), Clip Against Surfaces,
			Visible To and String);
		Modify Global Variable(E, Add, Multiply(Down, Global Variable(G)));
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Value In Array(Global Variable(L), 4), W), !=,
			0)), String("{0} - {1}", Value In Array(Global Variable(L), 4), String("{0} sec", Player Variable(Value In Array(
			Global Variable(L), 4), W), Null, Null), Null), Global Variable(E), Global Variable(H), Clip Against Surfaces,
			Visible To and String);
		Set Global Variable(Z, 30);
	}
}

rule("Global state 30 - Create finish checkpoint and icon")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 30;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Yellow, Value In Array(Global Variable(A), Global Variable(N)), Value In Array(
			Global Variable(B), Global Variable(N)), Visible To Position and Radius);
		Create Icon(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, P), ==, Global Variable(N))),
			Value In Array(Global Variable(A), Global Variable(N)), Exclamation Mark, Visible To and Position, White, True);
		Set Global Variable(Z, 31);
	}
}

rule("Global state 31 - Create options and operator zones")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 31;
	}

	actions
	{
		Create Effect(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, Q), >=, 3)), Ring, Green,
			Value In Array(Global Variable(C), 6), 1.500, Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), Player Variable(Current Array Element, M)), Ring, Red, Value In Array(
			Global Variable(C), 7), 1.500, Visible To Position and Radius);
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, Q), >=, 3)), String(
			"Optimize", Null, Null, Null), Add(Value In Array(Global Variable(C), 6), Multiply(Up, 3)), 2, Clip Against Surfaces,
			Visible To Position and String);
		Create In-World Text(Filtered Array(All Players(All Teams), Player Variable(Current Array Element, M)), String("Moderate", Null,
			Null, Null), Add(Value In Array(Global Variable(C), 7), Multiply(Up, 3)), 2, Clip Against Surfaces,
			Visible To Position and String);
		Set Global Variable(Z, 32);
	}
}

rule("Global state 40 - Create white checkpoint 1-4")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 40;
	}

	actions
	{
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 1), Compare(1, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 1), Value In Array(Global Variable(B), 1),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 2), Compare(2, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 2), Value In Array(Global Variable(B), 2),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 3), Compare(3, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 3), Value In Array(Global Variable(B), 3),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 4), Compare(4, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 4), Value In Array(Global Variable(B), 4),
			Visible To Position and Radius);
		Set Global Variable(Z, 41);
	}
}

rule("Global state 41 - Create white checkpoint 5-9")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 41;
	}

	actions
	{
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 5), Compare(5, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 5), Value In Array(Global Variable(B), 5),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 6), Compare(6, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 6), Value In Array(Global Variable(B), 6),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 7), Compare(7, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 7), Value In Array(Global Variable(B), 7),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 8), Compare(8, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 8), Value In Array(Global Variable(B), 8),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 9), Compare(9, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 9), Value In Array(Global Variable(B), 9),
			Visible To Position and Radius);
		Set Global Variable(Z, 42);
	}
}

rule("Global state 42 - Create white checkpoint 10-14")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 42;
	}

	actions
	{
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 10), Compare(10, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 10), Value In Array(Global Variable(B), 10),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 11), Compare(11, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 11), Value In Array(Global Variable(B), 11),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 12), Compare(12, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 12), Value In Array(Global Variable(B), 12),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 13), Compare(13, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 13), Value In Array(Global Variable(B), 13),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 14), Compare(14, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 14), Value In Array(Global Variable(B), 14),
			Visible To Position and Radius);
		Set Global Variable(Z, 43);
	}
}

rule("Global state 43 - Create white checkpoint 15-19")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 43;
	}

	actions
	{
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 15), Compare(15, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 15), Value In Array(Global Variable(B), 15),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 16), Compare(16, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 16), Value In Array(Global Variable(B), 16),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 17), Compare(17, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 17), Value In Array(Global Variable(B), 17),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 18), Compare(18, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 18), Value In Array(Global Variable(B), 18),
			Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, P), <, 19), Compare(19, <,
			Global Variable(N)))), Sphere, White, Value In Array(Global Variable(A), 19), Value In Array(Global Variable(B), 19),
			Visible To Position and Radius);
		Set Global Variable(Z, 50);
	}
}

rule("Global state 50 - Create static hud text")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 50;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), String("Records", Null, Null, Null), Null, Null, Left, -10.000, White, White, White,
			Visible To and String);
		Create HUD Text(All Players(All Teams), Null, Null, String("----------", Null, Null, Null), Left, -2.000, White, White, White,
			Visible To and String);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Value In Array(Player Variable(Current Array Element, O), 1), ==,
			False)), Null, Null, String("{0} {1}", String("Fastest", Null, Null, Null), String("Times", Null, Null, Null), Null), Left,
			-1.000, White, White, White, Visible To and String);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Value In Array(Player Variable(Current Array Element, O), 1), ==,
			True)), Null, Null, String("{0} {1}", String("Checkpoint", Null, Null, Null), String("Times", Null, Null, Null), Null), Left,
			-1.000, White, White, White, Visible To and String);
		Create HUD Text(All Players(All Teams), Null, Null, String("{0} = {1}", String("Use Ultimate Ability", Null, Null, Null), String(
			"Try Again", Null, Null, Null), Null), Top, 9, White, White, White, Visible To and String);
		Set Global Variable(Z, 90);
	}
}

rule("Global state 90 - complete global init")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 90;
		Is Game In Progress == True;
	}

	actions
	{
		Set Global Variable(Y, True);
		Set Global Variable(Z, 999);
	}
}

rule("Player state 0 and global initialization complete - Player initialization")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global Variable(Y) == True;
		Player Variable(Event Player, Z) == 0;
	}

	actions
	{
		Disable Built-In Game Mode Respawning(Event Player);
		Set Respawn Max Time(Event Player, 99);
		Disallow Button(Event Player, Ultimate);
		Set Player Variable(Event Player, O, Append To Array(Append To Array(False, False), False));
		Set Player Variable(Event Player, P, 999);
		Set Player Variable(Event Player, Q, 0);
		Set Player Variable(Event Player, R, Empty Array);
		Set Player Variable(Event Player, S, Empty Array);
		Set Player Variable(Event Player, T, 0);
		Chase Player Variable At Rate(Event Player, T, 10000, 1, None);
		Set Player Variable(Event Player, U, 0);
		Set Player Variable(Event Player, W, 999);
		Set Player Variable(Event Player, H, Empty Array);
		Modify Player Variable(Event Player, H, Append To Array, 0);
		Modify Player Variable(Event Player, H, Append To Array, 0);
		Modify Player Variable(Event Player, H, Append To Array, Null);
		Modify Player Variable(Event Player, H, Append To Array, Null);
		Set Player Variable(Event Player, I, Empty Array);
		Modify Player Variable(Event Player, I, Append To Array, 0);
		Wait(Random Real(0.250, 2), Ignore Condition);
		Set Player Variable(Event Player, Z, 1);
	}
}

rule("Player state 1 - Create player hud")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 1;
	}

	actions
	{
		Create HUD Text(Event Player, String("{0} sec", Player Variable(Event Player, X), Null, Null), Null, Null, Top, 10, White, White,
			White, Visible To and String);
		Create HUD Text(Event Player, Null, Null, String("{0}: {1}", String("Attempts", Null, Null, Null), Player Variable(Event Player,
			Q), Null), Left, -9.000, White, White, White, Visible To and String);
		Create HUD Text(Event Player, Null, Null, String("{0}: {1}", String("Finished", Null, Null, Null), Player Variable(Event Player,
			U), Null), Left, -8.000, White, White, White, Visible To and String);
		Create HUD Text(Event Player, Null, Null, String("{0}: {1}", String("{0} {1}", String("Game", Null, Null, Null), String("Time",
			Null, Null, Null), Null), String("{0}:{1}", Round To Integer(Divide(Player Variable(Event Player, T), 60), Down), Modulo(
			Round To Integer(Player Variable(Event Player, T), Down), 60), Null), Null), Left, -6.000, White, White, White,
			Visible To and String);
		Wait(0.100, Ignore Condition);
		Set Player Variable(Event Player, Z, 2);
	}
}

rule("Player state 9 - done loading")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 9;
	}

	actions
	{
		Big Message(Event Player, String("{0} {1}", String("Finished", Null, Null, Null), String("Loading", Null, Null, Null), Null));
		Set Player Variable(Event Player, Z, 10);
	}
}

rule("Player state 10 - Spawn player and prep waiting state")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 10;
	}

	actions
	{
		Set Player Variable(Event Player, P, 999);
		Set Player Variable At Index(Event Player, H, 0, Add(1, And(Value In Array(Player Variable(Event Player, O), 1), Array Contains(
			Global Variable(S), 1))));
		Stop Forcing Throttle(Event Player);
		Set Status(Event Player, Null, Invincible, 9999);
		Set Player Variable(Event Player, Z, 11);
	}
}

rule("Player state 11 - Wait for player to be alive")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 11;
		Is Alive(Event Player) == True;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, Z, 15);
	}
}

rule("Player state 15 - Teleport to gather room")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 15;
	}

	actions
	{
		Set Player Variable(Event Player, A, Value In Array(Global Variable(C), 1));
		Set Player Variable(Event Player, C, Random Real(Multiply(Player Variable(Event Player, A), -1.000), Player Variable(Event Player,
			A)));
		Set Player Variable(Event Player, A, Value In Array(Global Variable(C), 2));
		Set Player Variable(Event Player, D, Random Real(Multiply(Player Variable(Event Player, A), -1.000), Player Variable(Event Player,
			A)));
		Set Player Variable(Event Player, A, Multiply(Direction From Angles(Add(Value In Array(Global Variable(C), 3), 90), 0),
			Player Variable(Event Player, C)));
		Set Player Variable(Event Player, B, Multiply(Direction From Angles(Value In Array(Global Variable(C), 3), 0), Player Variable(
			Event Player, D)));
		Set Player Variable(Event Player, D, Add(Value In Array(Global Variable(C), 0), Add(Player Variable(Event Player, A),
			Player Variable(Event Player, B))));
		Teleport(Event Player, Player Variable(Event Player, D));
		Set Facing(Event Player, Direction From Angles(Horizontal Angle From Direction(Direction Towards(Player Variable(Event Player, D),
			Value In Array(Global Variable(C), 4))), 0), To World);
		Set Player Variable(Event Player, Z, 20);
	}
}

rule("Player state 20 and ultimate pressed - Initialize race")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 20;
		Is Button Held(Event Player, Ultimate) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Rooted, 9999);
		Wait(0.250, Ignore Condition);
		Set Player Variable(Event Player, Z, 21);
	}
}

rule("Player state 20 and left spawn - force to spawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 20;
		Team Of(Event Player) == Value In Array(Global Variable(D), 1);
		Is In Spawn Room(Event Player) == False;
		Global Variable(Q) == False;
	}

	actions
	{
		Set Player Variable(Event Player, Z, 15);
	}
}

rule("Player state 20 - teach how to start race")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 20;
		Player Variable(Event Player, Q) < 3;
		Global Variable(Q) == False;
	}

	actions
	{
		Wait(5, Abort When False);
		Small Message(Event Player, String("{0} = {1}", String("Ultimate Ability", Null, Null, Null), String("{0} {1}", String("Start",
			Null, Null, Null), String("Game", Null, Null, Null), Null), Null));
		Loop If Condition Is True;
	}
}

rule("player state 20 and in options spot - start options mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 20;
		Distance Between(Event Player, Value In Array(Global Variable(C), 6)) < 1.500;
		Player Variable(Event Player, Q) >= 3;
	}

	actions
	{
		Wait(1, Abort When False);
		Set Player Variable(Event Player, A, 0);
		Create HUD Text(Event Player, String("{0}: {1}", String("{0} {1}", String("Optimize", Null, Null, Null), Add(Player Variable(
			Event Player, A), 1), Null), Value In Array(Player Variable(Event Player, O), Player Variable(Event Player, A)), Null), Null,
			Null, Top, 12, Green, White, White, Visible To and String);
		Set Player Variable(Event Player, N, Last Text ID);
		Set Player Variable(Event Player, Z, 80);
	}
}

rule("player state 20 and button combo - enable operator")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 20;
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Wait(10, Abort When False);
		Small Message(Event Player, String("{0} {1}", String("Unlocking", Null, Null, Null), String("Moderate", Null, Null, Null), Null));
		Set Player Variable(Event Player, M, True);
	}
}

rule("player state 20 and in operator spot - start operator mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 20;
		Distance Between(Event Player, Value In Array(Global Variable(C), 7)) < 1.500;
		Player Variable(Event Player, M) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Set Player Variable(Event Player, A, 1);
		Create HUD Text(Event Player, String("{0} -> {1}", String("Moderate", Null, Null, Null), Player Variable(Event Player, A), Null),
			Null, Null, Top, 12, White, White, White, Visible To and String);
		Set Player Variable(Event Player, N, Last Text ID);
		Set Player Variable(Event Player, Z, 70);
	}
}

rule("Player state 21 - wait to stop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 21;
		Speed Of(Event Player) < 0.200;
	}

	actions
	{
		Set Player Variable(Event Player, Z, 22);
	}
}

rule("Player state 22 - spawn into race")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 22;
	}

	actions
	{
		Set Player Variable(Event Player, L, Player Variable(Event Player, S));
		Skip If(Not(Value In Array(Player Variable(Event Player, O), 2)), 1);
		Set Player Variable(Event Player, L, Global Variable(X));
		Set Player Variable(Event Player, I, Append To Array(Append To Array(Append To Array(Player Variable(Event Player, W), 0), 0), 0));
		Set Player Variable(Event Player, X, 0);
		Set Player Variable(Event Player, K, Empty Array);
		Set Player Variable(Event Player, J, Empty Array);
		Set Player Variable(Event Player, P, 1);
		Set Player Variable(Event Player, A, 0.800);
		Teleport(Event Player, Value In Array(Global Variable(A), 0));
		Set Facing(Event Player, Value In Array(Global Variable(B), 0), To World);
		Skip If(Compare(Value In Array(Player Variable(Event Player, O), 0), ==, True), 8);
		Small Message(Event Player, 3);
		Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 35);
		Wait(Player Variable(Event Player, A), Ignore Condition);
		Small Message(Event Player, 2);
		Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 35);
		Wait(Player Variable(Event Player, A), Ignore Condition);
		Small Message(Event Player, 1);
		Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 35);
		Wait(Player Variable(Event Player, A), Ignore Condition);
		Clear Status(Event Player, Invincible);
		Clear Status(Event Player, Rooted);
		Small Message(Event Player, String("{0}!!!", String("Go", Null, Null, Null), Null, Null));
		Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 999);
		Chase Player Variable At Rate(Event Player, X, 9999, 1, None);
		Set Player Variable(Event Player, Z, 30);
	}
}

rule("Player State 30 - Reach checkpoint")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 30;
		Distance Between(Position Of(Event Player), Value In Array(Global Variable(A), Player Variable(Event Player, P))) < Add(
			Value In Array(Global Variable(B), Player Variable(Event Player, P)), Value In Array(Global Variable(D), 0));
	}

	actions
	{
		Set Player Variable(Event Player, A, Value In Array(Global Variable(A), Player Variable(Event Player, P)));
		Set Player Variable(Event Player, B, Value In Array(Global Variable(B), Player Variable(Event Player, P)));
		Play Effect(Event Player, Ring Explosion, White, Player Variable(Event Player, A), Multiply(Player Variable(Event Player, B),
			2.500));
		Play Effect(Event Player, Explosion Sound, White, Position Of(Event Player), 80);
		Skip If(Not(Is True For Any(Global Variable(S), Compare(Player Variable(Event Player, P), ==, Current Array Element))), 2);
		Modify Player Variable(Event Player, K, Append To Array, Player Variable(Event Player, X));
		Modify Player Variable(Event Player, J, Append To Array, Subtract(Last Of(Player Variable(Event Player, K)), Value In Array(
			Player Variable(Event Player, L), Index Of Array Value(Global Variable(S), Player Variable(Event Player, P)))));
		Modify Player Variable(Event Player, P, Add, 1);
		Set Player Variable At Index(Event Player, H, 0, Add(1, And(Value In Array(Player Variable(Event Player, O), 1), Array Contains(
			Global Variable(S), Player Variable(Event Player, P)))));
		Abort If(Compare(Player Variable(Event Player, P), <, Global Variable(N)));
		Set Player Variable(Event Player, Z, 40);
	}
}

rule("Player State 40 - reach goal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 40;
		Distance Between(Position Of(Event Player), Value In Array(Global Variable(A), Global Variable(N))) < Add(Value In Array(
			Global Variable(B), Global Variable(N)), Value In Array(Global Variable(D), 0));
	}

	actions
	{
		Set Player Variable(Event Player, C, Value In Array(Global Variable(A), Player Variable(Event Player, P)));
		Play Effect(Event Player, Ring Explosion Sound, White, Player Variable(Event Player, C), 999);
		Set Player Variable(Event Player, P, 999);
		Set Player Variable(Event Player, Z, 50);
	}
}

rule("Player state 50 - Start finish race")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 50;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, X);
		Set Player Variable At Index(Event Player, K, 4, Player Variable(Event Player, X));
		Set Player Variable At Index(Event Player, J, 4, Subtract(Player Variable(Event Player, X), Value In Array(Player Variable(
			Event Player, L), 4)));
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
		Skip If(Compare(Player Variable(Event Player, X), >=, Player Variable(Event Player, W)), 2);
		Set Player Variable(Event Player, Z, 51);
		Abort;
		Small Message(Event Player, String("{0}: {1}", String("Time", Null, Null, Null), String("{0} sec", Player Variable(Event Player,
			X), Null, Null), Null));
		Set Player Variable(Event Player, Z, 60);
	}
}

rule("Player state 51- Update records")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 51;
	}

	actions
	{
		Set Player Variable(Event Player, W, Player Variable(Event Player, X));
		Set Player Variable(Event Player, S, Player Variable(Event Player, K));
		Skip If(Compare(Player Variable(Event Player, W), >=, Global Variable(W)), 5);
		Set Global Variable(W, Player Variable(Event Player, W));
		Set Global Variable(X, Player Variable(Event Player, S));
		Big Message(All Players(All Teams), String("{0}: {1}", String("New High Score", Null, Null, Null), String("{0} - {1}",
			Event Player, String("{0} sec", Player Variable(Event Player, W), Null, Null), Null), Null));
		Set Player Variable(Event Player, Z, 60);
		Abort;
		Small Message(All Players(All Teams), String("{0} - {1}", String("{0} {1}", Event Player, String("New Record", Null, Null, Null),
			Null), String("{0} sec", Player Variable(Event Player, W), Null, Null), Null));
		Set Player Variable(Event Player, Z, 60);
	}
}

rule("Player state 60 - Update stats and end race")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 60;
	}

	actions
	{
		Modify Player Variable(Event Player, U, Add, 1);
		Set Player Variable(Event Player, A, Append To Array(Player Variable(Event Player, R), Player Variable(Event Player, X)));
		Set Player Variable(Event Player, B, Sorted Array(Player Variable(Event Player, A), Current Array Element));
		Set Player Variable(Event Player, R, Array Slice(Player Variable(Event Player, B), 0, 5));
		Wait(1.500, Ignore Condition);
		Set Player Variable(Event Player, Z, 90);
	}
}

rule("Player state 70 and primary fire - increase operator action index")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 70;
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, A) < 3;
	}

	actions
	{
		Modify Player Variable(Event Player, A, Add, 1);
	}
}

rule("Player state 70 and secondary fire - decrease operator action index")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 70;
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, A) > 1;
	}

	actions
	{
		Modify Player Variable(Event Player, A, Add, -1.000);
	}
}

rule("Player state 70 and interact - run operator action for index")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 70;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Destroy HUD Text(Player Variable(Event Player, N));
		Set Player Variable(Event Player, Z, Add(100, Player Variable(Event Player, A)));
	}
}

rule("Player state 70 and leave operator spot - go back to wait mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 70;
		Distance Between(Event Player, Value In Array(Global Variable(C), 7)) > 3;
	}

	actions
	{
		Destroy HUD Text(Player Variable(Event Player, N));
		Set Player Variable(Event Player, Z, 20);
	}
}

rule("Player state 80 and primary fire - increase option index")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 80;
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, A) < Subtract(Count Of(Player Variable(Event Player, O)), 1);
	}

	actions
	{
		Modify Player Variable(Event Player, A, Add, 1);
	}
}

rule("Player state 80 and secondary fire - decrease option index")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 80;
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, A) > 0;
	}

	actions
	{
		Modify Player Variable(Event Player, A, Subtract, 1);
	}
}

rule("Player state 80 and interact - toggle option")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 80;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Set Player Variable(Event Player, B, Not(Value In Array(Player Variable(Event Player, O), Player Variable(Event Player, A))));
		Set Player Variable At Index(Event Player, O, Player Variable(Event Player, A), Player Variable(Event Player, B));
	}
}

rule("Player state 80 and leave options spot - go back to wait mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 80;
		Distance Between(Event Player, Value In Array(Global Variable(C), 6)) > 3;
	}

	actions
	{
		Destroy HUD Text(Player Variable(Event Player, N));
		Set Player Variable(Event Player, Z, 20);
	}
}

rule("Player state 90 - Start reset sequence")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 90;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, X);
		Modify Player Variable(Event Player, Q, Add, 1);
		Wait(1.500, Ignore Condition);
		Respawn(Event Player);
		Set Player Variable(Event Player, Z, 10);
	}
}

rule("player state 101 - operator action 1 - greet server")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 101;
		Is Button Held(Event Player, Interact) == False;
	}

	actions
	{
		Small Message(All Players(All Teams), String("{0} {1}", String("{0}!", String("{0} {1}", String("Hello", Null, Null, Null), String(
			"Participants", Null, Null, Null), Null), Null, Null), String("{0}!", String("{0} {1} {2}", String("Thanks", Null, Null, Null),
			4, String("Joining", Null, Null, Null)), Null, Null), Null));
		Set Player Variable(Event Player, Z, 20);
	}
}

rule("player state 102 - operator action 3 - toggle debug hud")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 102;
		Is Button Held(Event Player, Interact) == False;
	}

	actions
	{
		Set Global Variable(R, Not(Global Variable(R)));
		Set Player Variable(Event Player, Z, 20);
	}
}

rule("player state 103 - operator action 3 - start camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 103;
		Is Button Held(Event Player, Interact) == False;
	}

	actions
	{
		Set Player Variable(Event Player, A, Value In Array(Global Variable(A), 0));
		Start Camera(Event Player, Player Variable(Event Player, A), Add(Player Variable(Event Player, A), Facing Direction Of(
			Event Player)), 80);
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
		Set Player Variable(Event Player, P, 0);
		Set Player Variable(Event Player, Z, 200);
	}
}

rule("player state 200 - move camera backward")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 200;
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Modify Player Variable(Event Player, A, Add, Multiply(Facing Direction Of(Event Player), -0.500));
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("player state 200 - move camera forward")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 200;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Modify Player Variable(Event Player, A, Add, Multiply(Facing Direction Of(Event Player), 0.500));
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("player state 200 - advance checkpoint display")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 200;
		Is Button Held(Event Player, Crouch) == True;
	}

	actions
	{
		Set Player Variable(Event Player, P, Modulo(Add(Player Variable(Event Player, P), 1), Count Of(Global Variable(A))));
	}
}

rule("player state 200 - end camera mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 200;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Stop Camera(Event Player);
		Stop Forcing Throttle(Event Player);
		Set Player Variable(Event Player, P, 999);
		Set Player Variable(Event Player, Z, 20);
	}
}

rule("keep goal index updated")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(N) != Subtract(Count Of(Global Variable(A)), 1);
	}

	actions
	{
		Set Global Variable(N, Subtract(Count Of(Global Variable(A)), 1));
	}
}

rule("Player killed event - Reset PLAYER")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Global Variable(Y) == True;
		Player Variable(Event Player, Z) < 50;
	}

	actions
	{
		Set Player Variable(Event Player, Z, 90);
	}
}

rule("ultimate pressed - quick reset")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Ultimate) == True;
		Or(Compare(Player Variable(Event Player, Z), ==, 30), Compare(Player Variable(Event Player, Z), ==, 40)) == True;
	}

	actions
	{
		Kill(Event Player, Null);
	}
}

rule("Rebuild Leaderboard")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Y) == True;
		Global Variable(Q) == False;
	}

	actions
	{
		Set Global Variable(E, Filtered Array(All Players(All Teams), And(Compare(Player Variable(Current Array Element, W), !=, 0),
			Compare(Player Variable(Current Array Element, W), !=, 999))));
		Set Global Variable(L, Sorted Array(Global Variable(E), Player Variable(Current Array Element, W)));
		Set Global Variable(M, False);
		Skip If(Is True For Any(All Players(All Teams), And(Compare(Player Variable(Current Array Element, W), !=, 0), Compare(
			Player Variable(Current Array Element, W), <=, Global Variable(W)))), 3);
		Set Global Variable(M, True);
		Set Global Variable(E, Global Variable(L));
		Set Global Variable(L, Append To Array(Null, Global Variable(E)));
		Wait(5, Ignore Condition);
		Loop;
	}
}

rule("Make players phase")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Status(Event Player, Phased Out) == False;
		Global Variable(Q) == False;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 999);
	}
}

rule("loading message")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) < 10;
		Global Variable(Q) == False;
	}

	actions
	{
		Big Message(Event Player, String("{0}, {1}", String("Wait", Null, Null, Null), String("{0} {1}", String("Loading", Null, Null,
			Null), String("...", Null, Null, Null), Null), Null));
		Wait(2.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Build stats display text")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) >= 10;
		Or(And(Not(Value In Array(Player Variable(Event Player, O), 1)), Compare(Value In Array(Player Variable(Event Player, I), 0), !=,
			1)), And(Value In Array(Player Variable(Event Player, O), 1), Compare(Value In Array(Player Variable(Event Player, I), 0), !=,
			2))) == True;
	}

	actions
	{
		Destroy HUD Text(Value In Array(Player Variable(Event Player, Y), 0));
		Destroy HUD Text(Value In Array(Player Variable(Event Player, Y), 1));
		Destroy HUD Text(Value In Array(Player Variable(Event Player, Y), 2));
		Destroy HUD Text(Value In Array(Player Variable(Event Player, Y), 3));
		Destroy HUD Text(Value In Array(Player Variable(Event Player, Y), 4));
		Set Player Variable(Event Player, Y, Empty Array);
		Wait(0.100, Ignore Condition);
		Skip If(Value In Array(Player Variable(Event Player, O), 1), 15);
		Set Player Variable At Index(Event Player, I, 0, 1);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, R), 0), !=, 0)), Null,
			Null, String("{0}: {1}", 1, String("{0} sec", Value In Array(Player Variable(Event Player, R), 0), Null, Null), Null), Left, 0,
			White, White, Yellow, Visible To and String);
		Modify Player Variable(Event Player, Y, Append To Array, Last Text ID);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, R), 1), !=, 0)), Null,
			Null, String("{0}: {1}", 2, String("{0} sec", Value In Array(Player Variable(Event Player, R), 1), Null, Null), Null), Left, 1,
			White, White, White, Visible To and String);
		Modify Player Variable(Event Player, Y, Append To Array, Last Text ID);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, R), 2), !=, 0)), Null,
			Null, String("{0}: {1}", 3, String("{0} sec", Value In Array(Player Variable(Event Player, R), 2), Null, Null), Null), Left, 2,
			White, White, White, Visible To and String);
		Modify Player Variable(Event Player, Y, Append To Array, Last Text ID);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, R), 3), !=, 0)), Null,
			Null, String("{0}: {1}", 4, String("{0} sec", Value In Array(Player Variable(Event Player, R), 3), Null, Null), Null), Left, 3,
			White, White, White, Visible To and String);
		Modify Player Variable(Event Player, Y, Append To Array, Last Text ID);
		Wait(0.100, Ignore Condition);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Player Variable(Current Array Element, R), 4), !=, 0)), Null,
			Null, String("{0}: {1}", 5, String("{0} sec", Value In Array(Player Variable(Event Player, R), 4), Null, Null), Null), Left, 4,
			White, White, White, Visible To and String);
		Modify Player Variable(Event Player, Y, Append To Array, Last Text ID);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Abort;
		Set Player Variable At Index(Event Player, I, 0, 2);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Global Variable(S), 0), !=, 0)), Null, Null, String(
			"{0} / {1}", Value In Array(Player Variable(Event Player, L), 0), String("{0} / {1}", Value In Array(Player Variable(
			Event Player, K), 0), String("{0} {1}", Filtered Array(String("{0} + {1}", Empty Array, Value In Array(Player Variable(
			Event Player, J), 0), Null), Compare(Value In Array(Player Variable(Event Player, J), 0), >, 0)), Filtered Array(
			Value In Array(Player Variable(Event Player, J), 0), Compare(Value In Array(Player Variable(Event Player, J), 0), <=, 0)),
			Null), Null), Null), Left, 0, White, White, White, Visible To and String);
		Modify Player Variable(Event Player, Y, Append To Array, Last Text ID);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Global Variable(S), 1), !=, 0)), Null, Null, String(
			"{0} / {1}", Value In Array(Player Variable(Event Player, L), 1), String("{0} / {1}", Value In Array(Player Variable(
			Event Player, K), 1), String("{0} {1}", Filtered Array(String("{0} + {1}", Empty Array, Value In Array(Player Variable(
			Event Player, J), 1), Null), Compare(Value In Array(Player Variable(Event Player, J), 1), >, 0)), Filtered Array(
			Value In Array(Player Variable(Event Player, J), 1), Compare(Value In Array(Player Variable(Event Player, J), 1), <=, 0)),
			Null), Null), Null), Left, 1, White, White, White, Visible To and String);
		Modify Player Variable(Event Player, Y, Append To Array, Last Text ID);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Global Variable(S), 2), !=, 0)), Null, Null, String(
			"{0} / {1}", Value In Array(Player Variable(Event Player, L), 2), String("{0} / {1}", Value In Array(Player Variable(
			Event Player, K), 2), String("{0} {1}", Filtered Array(String("{0} + {1}", Empty Array, Value In Array(Player Variable(
			Event Player, J), 2), Null), Compare(Value In Array(Player Variable(Event Player, J), 2), >, 0)), Filtered Array(
			Value In Array(Player Variable(Event Player, J), 2), Compare(Value In Array(Player Variable(Event Player, J), 2), <=, 0)),
			Null), Null), Null), Left, 2, White, White, White, Visible To and String);
		Modify Player Variable(Event Player, Y, Append To Array, Last Text ID);
		Create HUD Text(Filtered Array(Event Player, Compare(Value In Array(Global Variable(S), 3), !=, 0)), Null, Null, String(
			"{0} / {1}", Value In Array(Player Variable(Event Player, L), 3), String("{0} / {1}", Value In Array(Player Variable(
			Event Player, K), 3), String("{0} {1}", Filtered Array(String("{0} + {1}", Empty Array, Value In Array(Player Variable(
			Event Player, J), 3), Null), Compare(Value In Array(Player Variable(Event Player, J), 3), >, 0)), Filtered Array(
			Value In Array(Player Variable(Event Player, J), 3), Compare(Value In Array(Player Variable(Event Player, J), 3), <=, 0)),
			Null), Null), Null), Left, 3, White, White, White, Visible To and String);
		Modify Player Variable(Event Player, Y, Append To Array, Last Text ID);
		Wait(0.100, Ignore Condition);
		Create HUD Text(Event Player, Null, Null, String("{0} / {1}", Value In Array(Player Variable(Event Player, L), 4), String(
			"{0} / {1}", Value In Array(Player Variable(Event Player, K), 4), String("{0} {1}", Filtered Array(String("{0} + {1}",
			Empty Array, Value In Array(Player Variable(Event Player, J), 4), Null), Compare(Value In Array(Player Variable(Event Player,
			J), 4), >, 0)), Filtered Array(Value In Array(Player Variable(Event Player, J), 4), Compare(Value In Array(Player Variable(
			Event Player, J), 4), <=, 0)), Null), Null), Null), Left, 4, White, White, White, Visible To and String);
		Modify Player Variable(Event Player, Y, Append To Array, Last Text ID);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Global state 32 - Create split checkpoints")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(Z) == 32;
	}

	actions
	{
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Value In Array(Player Variable(Current Array Element, O), 1), ==,
			True), Compare(Player Variable(Current Array Element, P), ==, Value In Array(Global Variable(S), 0)))), Sphere, Blue,
			Value In Array(Global Variable(A), Value In Array(Global Variable(S), 0)), Value In Array(Global Variable(B), Value In Array(
			Global Variable(S), 0)), Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Value In Array(Player Variable(Current Array Element, O), 1), ==,
			True), Compare(Player Variable(Current Array Element, P), ==, Value In Array(Global Variable(S), 1)))), Sphere, Blue,
			Value In Array(Global Variable(A), Value In Array(Global Variable(S), 1)), Value In Array(Global Variable(B), Value In Array(
			Global Variable(S), 1)), Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Value In Array(Player Variable(Current Array Element, O), 1), ==,
			True), Compare(Player Variable(Current Array Element, P), ==, Value In Array(Global Variable(S), 2)))), Sphere, Blue,
			Value In Array(Global Variable(A), Value In Array(Global Variable(S), 2)), Value In Array(Global Variable(B), Value In Array(
			Global Variable(S), 2)), Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), And(Compare(Value In Array(Player Variable(Current Array Element, O), 1), ==,
			True), Compare(Player Variable(Current Array Element, P), ==, Value In Array(Global Variable(S), 3)))), Sphere, Blue,
			Value In Array(Global Variable(A), Value In Array(Global Variable(S), 3)), Value In Array(Global Variable(B), Value In Array(
			Global Variable(S), 3)), Visible To Position and Radius);
		Set Global Variable(Z, 40);
	}
}

rule("Player state 2 - Create effects")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Z) == 2;
	}

	actions
	{
		Create Effect(Filtered Array(Event Player, And(Compare(Player Variable(Event Player, P), <, Global Variable(N)), Not(And(
			Value In Array(Player Variable(Event Player, O), 1), Array Contains(Global Variable(S), Player Variable(Event Player, P)))))),
			Sphere, Purple, Value In Array(Global Variable(A), Player Variable(Event Player, P)), Value In Array(Global Variable(B),
			Player Variable(Event Player, P)), Visible To Position and Radius);
		Create Icon(Filtered Array(Event Player, Compare(Player Variable(Event Player, P), <, Global Variable(N))), Value In Array(
			Global Variable(A), Player Variable(Event Player, P)), Diamond, Visible To and Position, White, True);
		Set Player Variable(Event Player, Z, 9);
	}
}